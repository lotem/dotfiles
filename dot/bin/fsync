#!/bin/bash
#
# Usage: fsync source_volume target_volume [options]
#
# Volume search path:
#   /Volumes/${volume_name}
#   /media/${volume_name}
#   /media/$USER/${volume_name}
#   /run/media/$USER/${volume_name}
#   $HOME/${volume_name}
#   ./${volume_name}
#
# Search with suffix:
#   ${volume_path}/Users/$USER
#   ${volume_path}/home/$USER

# Arguments:
source_volume="$1"
shift
target_volume="$1"
shift

if [[ -z "$source_volume" || -z "$target_volume" ]]; then
  echo "Usage: $(basename $0) source_volume target_volume [options]"
  exit 1
fi

configuration=
if [[ "$1" =~ ^:[[:alnum:]:]+$ ]]; then
  configuration="$1"
  echo "configuration: $configuration"
  shift
fi

function find_volume_path {
  # not a volume name, but a path is given.
  if [[ ! ( "$1" =~ ^[[:alnum:]] ) && -d "$1" ]]; then
    echo "$1"
    return
  fi
  # try to find a volume that matches the name.
  if [[ "$OSTYPE" =~ 'darwin' ]]; then
    if [[ -d "/Volumes/$1" ]]; then
      echo "/Volumes/$1"
      return
    fi
  elif [[ "$OSTYPE" =~ 'linux-gnu' ]]; then
    if [[ -d "/media/$1" ]]; then
      echo "/media/$1"
      return
    elif [[ -d "/media/$USER/$1" ]]; then
      echo "/media/$USER/$1"
      return
    elif [[ -d "/run/media/$USER/$1" ]]; then
      echo "/run/media/$USER/$1"
      return
    fi
  fi
  # search standard locations.
  if [[ -d "$HOME/$1" ]]; then
    echo "$HOME/$1"
    return
  elif [[ -d "./$1" ]]; then
    echo "./$1"
    return
  fi
}

function find_volume {
  # remote host?
  if [[ "$1" =~ ^[[:alnum:].]*::? ]]; then
    echo "$1"
    return
  fi
  volume_path=$(find_volume_path "$1")
  #echo "volume_path='$volume_path'" 1>&2
  if [[ -z "$volume_path" ]]; then
    return
  fi
  # look for user's home directory in the volume.
  if [[ "$OSTYPE" =~ 'darwin' ]]; then
    home_path="$volume_path/Users/$USER"
  elif [[ "$OSTYPE" =~ 'linux-gnu' ]]; then
    home_path="$volume_path/home/$USER"
  fi
  if [[ -d "$home_path" ]]; then
    volume_path="$home_path"
  fi
  echo "$volume_path"
}

source_volume_path=$(find_volume "$source_volume")
echo "source_volume_path='$source_volume_path'" 1>&2
if [[ -z "$source_volume_path" ]]; then
    echo "unable to access volume '$source_volume'"
    exit 1
fi
target_volume_path=$(find_volume "$target_volume")
echo "target_volume_path='$target_volume_path'" 1>&2
if [[ -z "$target_volume_path" ]]; then
    echo "unable to access volume '$target_volume'"
    exit 1
fi

if [[ "$source_volume_path" -ef "$target_volume_path" ]]; then
    echo "$source_volume and $target_volume are the same path."
    exit 1
fi

fsync_config_file=.fsync-config

# Predefined flags:
fsync_dirlink="-kK"
fsync_fat="--no-p --no-g --chmod=F-x --modify-window=1"
fsync_unix="-lHopg"
fsync_onefs="-x"
# Override the following variables in .fsync-config as necessary.
fsync_command="rsync"
fsync_flags="-FOrtv"
# Set value to empty in .fsync-config to disable the feature.
fsync_backup_dir="$target_volume_path/backup/`date +%F`"
fsync_excludes_file=~/.excludes
fsync_filter_file=$source_volume_path/.fsync-filter

# Apply configuration options.
if [[ ! "$configuration" =~ :nodel ]]; then
  fsync_flags="$fsync_flags --del"
fi
if [[ "$configuration" =~ :dirlink ]]; then
  fsync_flags="$fsync_flags $fsync_dirlink"
fi
if [[ "$configuration" =~ :fat ]]; then
  fsync_flags="$fsync_flags $fsync_fat"
fi
if [[ "$configuration" =~ :unix ]]; then
  fsync_flags="$fsync_flags $fsync_unix"
fi
if [[ "$configuration" =~ :onefs ]]; then
  fsync_flags="$fsync_flags $fsync_onefs"
fi
if [[ "$configuration" =~ :nobackup ]]; then
  fsync_backup_dir=
elif [[ "$configuration" =~ :tmp ]]; then
  fsync_backup_dir="/tmp/backup/`date +%F`"
elif [[ "$configuration" =~ :trash ]]; then
  if [[ "$OSTYPE" =~ 'darwin' ]]; then
    fsync_backup_dir="~/.Trash/`date +%F`"
  elif [[ "$OSTYPE" =~ 'linux-gnu' ]]; then
    fsync_backup_dir="~/.local/share/Trash/files/`date +%F`"
  fi
fi

# Read options specific to the volume.
if [[ -e "$source_volume_path/$fsync_config_file" ]]; then
  source "$source_volume_path/$fsync_config_file"
fi

if [[ -n "$fsync_backup_dir" ]]; then
  fsync_backup="-b --backup-dir=$fsync_backup_dir"
fi

if [[ -e "$fsync_excludes_file" ]]; then
  fsync_excludes="--exclude-from=$fsync_excludes_file"
fi

if [[ -e "$fsync_filter_file" ]]; then
  fsync_filter="--filter=merge_$fsync_filter_file"
fi

fsync_flags="$fsync_flags $@ $fsync_backup $fsync_excludes $fsync_filter"

function do_sync {
  echo "SYNC COMMAND:" $fsync_command $fsync_flags "$source_volume_path/" "$target_volume_path/"
  $fsync_command $fsync_flags "$source_volume_path/" "$target_volume_path/" || exit 1
  echo
  echo "all up to date."
}

do_sync 2>&1 | tee /tmp/filesync.log

# vim:set ts=2 sw=2 sts=2 sta et:
